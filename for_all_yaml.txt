# Variables
ANSIBLE_LINT_CONFIG = .ansible-lint
ANSIBLE_LINT_IGNORE = .ansible-lint-ignore

# Default target
all: check-ansible-lint auto-fix-linting

# Check if ansible-lint is installed
check-ansible-lint:
	@which ansible-lint > /dev/null || (echo "ansible-lint is not installed" && exit 1)

# Auto-fix linting errors in all YAML files recursively
auto-fix-linting: check-ansible-lint
	@echo "Running ansible-lint with --fix to auto-fix linting errors in all YAML files..."
	@find . -type f \( -iname "*.yaml" -o -iname "*.yml" \) -exec ansible-lint --fix {} +

# Get linting errors (without fixing)
linting-errors: check-ansible-lint
	@echo "Running ansible-lint to get linting errors..."
	@find . -type f \( -iname "*.yaml" -o -iname "*.yml" \) -exec ansible-lint {} +

# Create .ansible-lint file with default configuration
create-ansible-lint-config:
	@echo "Creating .ansible-lint file with default configuration..."
	@echo "skip_list: []" > $(ANSIBLE_LINT_CONFIG)
	@echo "fail_on_warning: False" >> $(ANSIBLE_LINT_CONFIG)

# Configure .ansible-lint-ignore file with empty ignore list
create-ansible-lint-ignore:
	@echo "Creating .ansible-lint-ignore file with an empty ignore list..."
	@touch $(ANSIBLE_LINT_IGNORE)

# Clean up generated files
clean:
	@echo "Cleaning up generated files..."
	@rm -f $(ANSIBLE_LINT_CONFIG) $(ANSIBLE_LINT_IGNORE)
